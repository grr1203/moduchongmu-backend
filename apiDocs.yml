openapi: 3.0.0
info:
  title: 모두의 총무
  description: 모두의 총무 API Docs
  version: 0.0.1
  contact:
    name: API support
    url: gyrms9412@naver.com
    email: gyrms9412@naver.com
  license:
    name: MIT
    url: https://spdx.org/licenses/MIT
servers:
  - url: 'https://[api-gateway-id].execute-api.ap-northeast-2.amazonaws.com/stag'
    description: Stag server
paths:
  # test
  /test:
    get:
      summary: test
      description: 테스트 함수
      operationId: test/get
      tags:
        - test
      parameters:
        - name: name
          in: query
          description: test parameter 1
          required: true
          schema:
            type: string
        - name: age
          in: query
          description: test parameter 2
          required: true
          schema:
            type: integer
        - name: favoriteFood
          in: query
          description: test parameter 3
          schema:
            enum:
              - pizza
              - taco
              - fries
      responses:
        '200':
          description: test success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      name:
                        type: string
                        description: test output 1
                      age:
                        type: integer
                        description: test output 2
        '500':
          description: 'code: Internal_Server_Error'
  
  # User
  /user:
    get:
      summary: user
      description: |
        - User 정보를 조회한다. (token 정보로 DB 조회)
        - 유저 프로필 이미지는 s3 url + key: user/${userEmail}/profile.png 를 이용하여 조회
      operationId: user/get
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: |
            유저 데이터 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

    put:
      summary: user
      description: |
        - userName이 없는 유저에게 userName을 부여하고 회원가입 처리를 완료한다.
        - User 정보를 수정한다.
        - profileImage: true로 요청 시 response의 profileImageUrl에 s3 presigned url 전달
      operationId: user/put
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: 유저 이름 수정 요청시
                marketingAgreed:
                  type: boolean
                  description: 마케팅 동의 여부 수정 요청시
                statusMessage:
                  type: string
                  description: 상태 메시지 수정 요청시
                profileIamge:
                  type: boolean
                  description: 프로필 이미지 수정 요청시
      responses:
        '200':
          description: 수정된 유저 데이터 전달
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  profileImageUrl:
                    type: string
                      
    delete:
      summary: user
      description: accessToken의 claim을 참조해 User를 삭제한다.
      operationId: user/delete
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  userEmail:
                    type: string
                    description: 삭제된 유저의 이메일

  # Signin
  /signin/apple:
    post:
      summary: signin
      description: |
        - Apple 회원가입 / 로그인
        - 회원가입 시 response의 processType: signup
          이후 PUT user API로 userName을 부여해야 회원가입 완료
        - 로그인 시 response의 processType: signin
      operationId: signin/apple/post
      tags:
        - signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Apple에서 발급한 identityToken
              required:
                - token
      responses:
        '200':
          description: 회원가입 / 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  processType:
                    type: string
                    description: signup or signin
                  accessToken:
                    type: string
                    description: 로그인 성공 시 발급되는 accessToken
                  refreshToken:
                    type: string
                    description: 로그인 성공 시 발급되는 refreshToken
        '401':
          description: 'code: Verification_Failed'
        '500':
          description: 'code: Internal_Server_Error'
  
  /signin/google:
    post:
      summary: signin
      description: |
        - Google 회원가입 / 로그인
        - 회원가입 시 response의 processType: signup
          이후 PUT user API로 userName을 부여해야 회원가입 완료
        - 로그인 시 response의 processType: signin
      operationId: signin/google/post
      tags:
        - signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Google에서 발급한 id Token
              required:
                - token
      responses:
        '200':
          description: 회원가입 / 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  processType:
                    type: string
                    description: signup or signin
                  accessToken:
                    type: string
                    description: 로그인 성공 시 발급되는 accessToken
                  refreshToken:
                    type: string
                    description: 로그인 성공 시 발급되는 refreshToken
        '401':
          description: 'code: Verification_Failed'
        '500':
          description: 'code: Internal_Server_Error'

  /signin/kakao:
    post:
      summary: signin
      description: |
        - Kakao 회원가입 / 로그인
        - 회원가입 시 response의 processType: signup
          이후 PUT user API로 userName을 부여해야 회원가입 완료
        - 로그인 시 response의 processType: signin
      operationId: signin/kakao/post
      tags:
        - signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Kakao에서 발급한 access token
              required:
                - token
      responses:
        '200':
          description: 회원가입 / 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  processType:
                    type: string
                    description: signup or signin
                  accessToken:
                    type: string
                    description: 로그인 성공 시 발급되는 accessToken
                  refreshToken:
                    type: string
                    description: 로그인 성공 시 발급되는 refreshToken
        '401':
          description: 'code: Verification_Failed'
        '500':
          description: 'code: Internal_Server_Error'
  
  /signin/naver:
    post:
      summary: signin
      description: |
        - Naver 회원가입 / 로그인
        - 회원가입 시 response의 processType: signup
          이후 PUT user API로 userName을 부여해야 회원가입 완료
        - 로그인 시 response의 processType: signin
      operationId: signin/naver/post
      tags:
        - signin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Naver에서 발급한 access token
              required:
                - token
      responses:
        '200':
          description: 회원가입 / 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  processType:
                    type: string
                    description: signup or signin
                  accessToken:
                    type: string
                    description: 로그인 성공 시 발급되는 accessToken
                  refreshToken:
                    type: string
                    description: 로그인 성공 시 발급되는 refreshToken
        '401':
          description: 'code: Verification_Failed'
        '500':
          description: 'code: Internal_Server_Error'
  
  # Friend
  /friend/search:
    get:
      summary: friend
      description: |
        - 이메일, 닉네임으로 친구 검색
        - 검색 결과가 없는 경우 response의 userArray: [] (빈 배열)로 응답
      operationId: friend/search/get
      tags:
        - friend
      security:
        - bearerAuth: []
      parameters:
        - name: searchString
          in: query
          description: 검색할 문자열
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 친구 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  userArray:
                    type: array
                    properties:
                      userEmail:
                        type: string
                        description: 검색된 유저의 이메일
                      userName:
                        type: string
                        description: 검색된 유저의 이름
        '500':
          description: 'code: Internal_Server_Error'

  /friend:
    post:
      summary: friend
      description: |
        - 내 친구목록에 새로운 친구 추가하고 추가된 친구에게 푸시 알림 전송
        - 이미 추가된 친구인 경우 response의 isAlreadyFriend: true로 응답
      operationId: friend/post
      tags:
        - friend
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newFriendName:
                  type: string
                  description: 추가할 친구의 이름
              required:
                - newFriendName  
      responses:
        '200':
          description: 친구 추가 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  newFriendName:
                    type: string
        '500':
          description: 'code: Internal_Server_Error'

    get:
      summary: friend
      description: |
        - 내 친구 목록 / 친구 후보(나를 추가했는데 내가 친구로 추가하지 않은 유저) 목록 조회
        - option 파라미터 없을시 둘 다 조회
        - option - friend : 내 친구 목록 조회
        - option - beforeFriend : 친구 후보 목록 조회
      operationId: friend/get
      tags:
        - friend
      security:
        - bearerAuth: []
      parameters:
        - name: option
          in: query
          description: friend | beforeFriend | null
          schema:
            type: string
      responses:
        '200':
          description: 친구 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  friendArray:
                    type: array
                    description: string[] - 친구 닉네임 목록
                  beforeFriendArray:
                    type: array
                    description: string[] - 친구 후보 닉네임 목록
        '500':
          description: 'code: Internal_Server_Error'

  # Travel
  /travel:
    post:
      summary: travel
      description: |
        - 여행 방 생성
        - 생성자가 방장으로 여행 방에 참여하게 되며 바꿀 수 없음
        - 생성 후 다른 유저 초대 가능
      operationId: travel/post
      tags:
        - travel
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                travelName:
                  type: string
                  description: 여행 이름
                destination:
                  type: string
                  description: 여행지
                startDate:
                  type: string
                  description: 여행 시작일, YYYY-MM-DD의 Date 형식
                endDate:
                  type: string
                  description: 여행 종료일, YYYY-MM-DD의 Date 형식
                memo: 
                  type: string
                  description: 메모
              required:
                - travelName
                - destination
                - startDate
                - endDate
      responses:
        '200':
          description: 여행 일정 추가 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  travel:
                    $ref: '#/components/schemas/Travel'
        '409':
          description: 'code: ALREADY_EXIST_TRAVEL_NAME'
        '500':
          description: 'code: Internal_Server_Error'
    
    get:
      summary: travel
      description: 여행 방 조회 - 자신이 멤버로 포함된 여행만 조회 가능
      operationId: travel/get
      tags:
        - travel
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: query
          description: 조회할 여행 방의 uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 여행 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  travel:
                    $ref: '#/components/schemas/Travel'
        '403':
          description: 'code: NOT_MEMBER'
        '500':
          description: 'code: Internal_Server_Error'
    
    put:
      summary: travel
      description: |
        - 여행 정보 수정
        - 정산 완료 시 settlementDone: true로 요청
        - 멤버 수정은 삭제에 대해서만 처리, 삭제할 인원을 제외한 나머지 멤버를 memberArray에 넣어 요청
        - 여행에 멤버 추가는 초대 API로 처리
        - 커버 이미지 수정 요청 시 coverImage: true로 요청, response의 postingImageUrl에 s3 presigned url 전달
      operationId: travel/put
      tags:
        - travel
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: 수정할 여행 방의 uid
                travelName:
                  type: string
                  description: 여행 이름 수정 요청시
                destination:
                  type: string
                  description: 여행지 수정 요청시
                startDate:
                  type: string
                  description: 여행 시작일 수정 요청시, YYYY-MM-DD의 Date 형식
                endDate:
                  type: string
                  description: 여행 종료일 수정 요청시, YYYY-MM-DD의 Date 형식
                memo: 
                  type: string
                  description: 메모 수정 요청시
                settlementDone:
                  type: boolean
                  description: 정산 완료 여부 수정 요청시
                memberArray:
                  type: array
                  items:
                    type: string
                  description: 삭제할 멤버 uid 목록
                coverImage:
                  type: boolean
                  description: 여행 방 커버 이미지 수정 요청시
              required:
                - uid
      responses:
        '200':
          description: 여행 정보 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  travel:
                    $ref: '#/components/schemas/Travel'
                  postingImageUrl:
                    type: string
        '500':
          description: 'code: Internal_Server_Error'
  
    delete:
      summary: travel
      description: |
        - 여행 방 삭제
        - 방장만 삭제 가능
      operationId: travel/delete
      tags:
        - travel
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: query
          description: 삭제할 여행 방의 uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    description: 삭제된 여행 방의 uid
        '403':
          description: 'code: NOT_HOST'
        '500':
          description: 'code: Internal_Server_Error'

  /travel/current:
    get:
      summary: travel
      description: |
        - 현재 진행중인 여행 및 종료된 여행중 미정산된 여행 조회
        - currentDate로 현지 시간 보낼 시 이 시간 기준, 보내지 않을 시 서버 시간으로 계산한 한국 시간 기준
        - 진행중인 여행이 없다면 response의 travel: null로 응답
        - 종료된 여행이 모두 정산 완료 되었다면 response의 unsettledTravel: null로 응답
      operationId: travel/current/get
      tags:
        - travel
      security:
        - bearerAuth: []
      parameters:
        - name: currentDate
          in: query
          description: 현재 날짜
          schema:
            type: string
      responses:
        '200':
          description: 여행 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  travel:
                    $ref: '#/components/schemas/Travel'
                    nullable: true
                  invitedTravel:
                    $ref: '#/components/schemas/Travel'
                    description: 초대받은 아직 참여 전인 여행
                  unsettledTravel:
                    $ref: '#/components/schemas/Travel'
                    description: 종료된 여행 중 미정산된 여행

  /travel/list:
    get:
      summary: travel
      description: |
        - 내 여행 목록 조회
        - 최신 여행부터 내림차순
        - 무한스크롤을 위해 pageSize, page 파라미터 사용
        - 페이지 초과시 travelList: [] 로 응답
      operationId: travel/list/get
      tags:
        - travel
      security:
        - bearerAuth: []
      parameters:
        - name: pageSize
          in: query
          required: true
          schema:
            type: number
        - name: page
          in: query
          required: true
          schema:
            type: number
      responses:
        '200':
          description: 여행 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentTravel:
                    $ref: '#/components/schemas/Travel'
                    description: 현재 진행중인 여행
                  invitedTravel:
                    $ref: '#/components/schemas/Travel'
                    description: 초대받은 아직 참여 전인 여행
                  travelList:
                    type: array
                    items:
                      type: object
                      properties:
                        travel:
                          $ref: '#/components/schemas/Travel'
                  totalCount:
                    type: number

  /travel/enter:
    post:
      summary: travel
      description: 초대받은 여행에 참여(초대 수락)
      operationId: travel/enter/post
      tags:
        - travel
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                travelUid:
                  type: string
                  description: 초대받은 여행 방의 uid
              required:
                - travelUid
      responses:
        '200':
          description: 여행 방 참여 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  travelUid:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        userEmail:
          type: string
        userName:
          type: string
        registerType:
          type: string
        registeredDate:
          type: string
        lastLoginDate:
          type: string
        marketingAgreed:
          type: number
    Travel:
      type: object
      properties:
        uid:
          type: string
        host:
          type: string
        travelName:
          type: string
        destination:
          type: string
        memberArray:
          type: array
          items:
            type: string
        startDate:
          type: string
        endDate:
          type: string
        memo:
          type: string
        settlementDone:
          type: boolean
        coverImgUrl:
          type: string
        createdDate:
          type: string
        