frameworkVersion: '3'
service: moduchongmu
app: moduchongmu
useDotenv: true
variablesResolutionMode: 20210326
package:
  exclude:
    - src/ts/**
  individually: true
  excludeDevDependencies: true
provider:
  deploymentMethod: direct
  name: aws
  runtime: nodejs20.x
  iam:
    role: DefaultRole
  httpApi:
    cors:
      allowedHeaders:
        - Content-Type
        - Authorization
    authorizers:
      Authorizer:
        type: request
        functionName: auth_authorizer
        identitySource: 
          - $request.header.Authorization
        enableSimpleResponses: true
  endpointType: REGIONAL
  stage: dev
  tags:
    Service: ${self:service}
    Application: ${self:service}
    Environment: ${env:STAGE, "dev"}
  stackTags:
    Application: ${self:service}
    Service: ${self:service}
    Environment: ${env:STAGE, "dev"}
  versionFunctions: false
  region: ap-northeast-2
  stackName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-serverless
  timeout: 10
  environment:
    APP: ${self:service}
    STAGE: ${env:STAGE, "dev"}
    NODE_OPTIONS: --enable-source-maps
    # http_api_gateway_id:
    #   Ref: HttpApi
    JWT_SECRET_KEY: ${ssm:/${self:service}/${env:STAGE, "dev"}/jwt_secret_key}
    API_LAYER_KEY: ${ssm:/${self:service}/${env:STAGE, "dev"}/api_layer_key}
    GOOGLE_CLIENT_SECRET: ${ssm:/${self:service}/${env:STAGE, "dev"}/google_client_secret}

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    external:
      ['pg', 'pg-query-stream', 'sqlite3', 'better-sqlite3', 'oracledb', 'tedious', 'mysql']

  jest:
  alerts:
    dashboards: false
plugins:
  - serverless-plugin-log-subscription
  - serverless-esbuild

resources: # CloudFormation template syntax
  Resources:
    DefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${env:STAGE, "dev"}-${env:VER, "1"}-LambdaExcutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
          - arn:aws:iam::aws:policy/AmazonSESFullAccess
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - rds-db:connect
                    - logs:*
                    - athena:*
                    - ssm:*
                    - execute-api:*
                    - secretsmanager:*
                    - lambda:*
                    - sns:*
                    - sqs:*
                  Resource: '*'
    
functions:
  test:
    handler: build/test/get.handler
    events:
      - httpApi:
          path: /test
          method: get
  auth_authorizer:
    handler: build/auth/authorizer.handler
    events: []
  api_docs_get:
      handler: build/api/docs/get.handler
      events:
        - httpApi:
            path: /api/docs
            method: get
      package:
        include:
          - apiDocs.yml
  
  # User
  user_get:
    handler: build/user/get.handler
    events:
      - httpApi:
          path: /user
          method: get
          authorizer:             
            name: Authorizer
  user_put:
    handler: build/user/put.handler
    events:
      - httpApi:
          path: /user
          method: put
          authorizer: 
            name: Authorizer
  user_delete:
    handler: build/user/delete.handler
    events:
      - httpApi:
          path: /user
          method: delete
          authorizer: 
            name: Authorizer

  # Signin
  signin_naver_post:
    handler: build/signin/naver/post.handler
    events:
      - httpApi:
          path: /signin/naver
          method: post
  signin_kakao_post:
    handler: build/signin/kakao/post.handler
    events:
      - httpApi:
          path: /signin/kakao
          method: post
  signin_apple_post:
    handler: build/signin/apple/post.handler
    events:
      - httpApi:
          path: /signin/apple
          method: post
  signin_google_post:
    handler: build/signin/google/post.handler
    events:
      - httpApi:
          path: /signin/google
          method: post
  
  # Token
  token_access_get:
    handler: build/token/access/get.handler
    events:
      - httpApi:
          path: /token/access
          method: get
  token_refresh_delete:
    handler: build/token/refresh/delete.handler
    events:
      - httpApi:
          path: /token/refresh
          method: delete
          authorizer: 
            name: Authorizer

  # Travel
  travel_post:
    handler: build/travel/post.handler
    events:
      - httpApi:
          path: /travel
          method: post
          authorizer: 
            name: Authorizer
  travel_get:
    handler: build/travel/get.handler
    events:
      - httpApi:
          path: /travel
          method: get
          authorizer: 
            name: Authorizer
  travel_current_get:
    handler: build/travel/current/get.handler
    events:
      - httpApi:
          path: /travel/current
          method: get
          authorizer: 
            name: Authorizer
  travel_list_get:
    handler: build/travel/list/get.handler
    events:
      - httpApi:
          path: /travel/list
          method: get
          authorizer: 
            name: Authorizer
  travel_put:
    handler: build/travel/put.handler
    events:
      - httpApi:
          path: /travel
          method: put
          authorizer: 
            name: Authorizer
  travel_delete:
    handler: build/travel/delete.handler
    events:
      - httpApi:
          path: /travel
          method: delete
          authorizer: 
            name: Authorizer
  travel_invite_post:
    handler: build/travel/invite/post.handler
    events:
      - httpApi:
          path: /travel/invite
          method: post
          authorizer: 
            name: Authorizer
  travel_invite_get:
    handler: build/travel/invite/get.handler
    events:
      - httpApi:
          path: /travel/invite
          method: get
  travel_city_get:
    handler: build/travel/city/get.handler
    events:
      - httpApi:
          path: /travel/city
          method: get
          authorizer: 
            name: Authorizer
  travel_settlement_post:
    handler: build/travel/settlement/post.handler
    events:
      - httpApi:
          path: /travel/settlement
          method: post
          authorizer: 
            name: Authorizer
  travel_member_delete:
    handler: build/travel/member/delete.handler
    events:
      - httpApi:
          path: /travel/member
          method: delete
          authorizer: 
            name: Authorizer

  # Admin
  admin_city_post:
    handler: build/admin/city/post.handler
    events:
      - httpApi:
          path: /admin/city
          method: post

  # Transaction
  transaction_currency_get:
    handler: build/transaction/currency/get.handler
    events:
      - httpApi:
          path: /transaction/currency
          method: get
          authorizer: 
            name: Authorizer
  transaction_post:
    handler: build/transaction/post.handler
    events:
      - httpApi:
          path: /transaction
          method: post
          authorizer: 
            name: Authorizer
  transaction_list_get:
    handler: build/transaction/list/get.handler
    events:
      - httpApi:
          path: /transaction/list
          method: get
          authorizer: 
            name: Authorizer
  transaction_put:
    handler: build/transaction/put.handler
    events:
      - httpApi:
          path: /transaction
          method: put
          authorizer: 
            name: Authorizer
  transaction_delete:
    handler: build/transaction/delete.handler
    events:
      - httpApi:
          path: /transaction
          method: delete
          authorizer:
            name: Authorizer
  transaction_exchangeRate_post:
    handler: build/transaction/exchangeRate/post.handler
    events:
      - schedule:
          rate: cron(0 9 * * ? *)
          enabled: true
  transaction_exchangeRate_get:
    handler: build/transaction/exchangeRate/get.handler
    events:
      - httpApi:
          path: /transaction/exchangeRate
          method: get
          authorizer: 
            name: Authorizer
  